import asyncio
import random
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State

from apps import validation
from apps.commands.base import vip_menu, menu_key
from apps.db import function_db
from apps.message import text_error, text_ok

from config import dp, bot, sender_email, password_email


class StateRegister(StatesGroup):

    name_state = State()
    email_state = State()
    phone_state = State()
    data = State()
    validation  = State()


@dp.message_handler(Text(equals='üöÄ Account üöÄ'))
async def register(message: types.Message, state: StateRegister):
    id_user = message.from_user.id
    if int(id_user) in function_db.all_user():
        await bot.send_message(message.from_user.id, "Welcome üöÄ VIP üöÄ Account", reply_markup=vip_menu)
        state.finish()
    else:
        await bot.send_message(message.from_user.id, "–í–∞—à –§–∞–º–∏–ª–∏—è –∏ –ò–º—è")
        await StateRegister.name_state.set()


@dp.message_handler(state=StateRegister.name_state)
async def username(message: types.Message, state: StateRegister):
    name = message.text

    if validation.validate_text(name)==False:
        await StateRegister.name_state.set()
        await bot.send_message(message.from_user.id, text_error['name'])

    elif validation.validate_text(name)==True:
        async with state.proxy() as data:
            data['name_state'] = message.text
        await StateRegister.next()
        await bot.send_message(message.from_user.id, text_ok['email'])


@dp.message_handler(state=StateRegister.email_state)
async def gmail(message: types.Message, state: StateRegister):
    email = message.text

    if validation.validate_email(email)==False:
        await StateRegister.name_state.set()
        await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–∞")

    elif validation.validate_email(email)==True:
        async with state.proxy() as data:
            data['email_state'] = message.text
        await StateRegister.phone_state.set()
        await bot.send_message(message.from_user.id, text_ok['phone'])


@dp.message_handler(state=StateRegister.phone_state)
async def phone(message: types.Message, state: StateRegister):
    phone = message.text

    if validation.validate_phone(phone)==False:
        await StateRegister.phone_state.set()
        await bot.send_message(message.from_user.id, text_error['phone'])

    else:

        code = random.randint(1000, 10000)
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()

        async with state.proxy() as data:
            try:
                server.login(sender_email, password_email)
                msg = str(code)

                server.sendmail(sender_email, data['email_state'], msg)
                print('ok')
            except Exception as _ex:
                pass

        async with state.proxy() as data:
            data['phone_state'] = message.text
            data['data'] = str(code)
            await StateRegister.validation.set()
            await bot.send_message(message.from_user.id, "–ü—Ä–æ–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à @gmail –∞–∫–∫–∞—É–Ω—Ç\n–í–∞–º –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫–æ–¥ –¥–ª—è –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—é\n–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç —ç—Ç–æ—Ç –∫–æ–¥ –∑–¥–µ—Å")


@dp.message_handler(state=StateRegister.validation)
async def process_phone_command(message: types.Message, state: StateRegister):
    code = str(message.text)
    async with state.proxy() as data:
        if data['data'] == code:
            info = {
                'id_user': message.from_user.id,
                'username': data['name_state'],
                'email': data['email_state'],
                'phone': data['phone_state']
            }
            function_db.add_user(info)
            await bot.send_message(message.from_user.id, "–í–∞–º –ø–æ–¥–∫–ª—é—á–µ–Ω üöÄ VIP üöÄ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º —Å—Ç–æ–∏—Ç –ø–ª–∞—Ç–∏—Ç—å –º–µ—Å—è—Ü 10$ —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º", reply_markup=vip_menu)
            await state.finish()
        elif code=='–æ—Ç–º–µ–Ω–∞':
            await bot.send_message(message.from_user.id, '–ë—ã–ª –æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',reply_markup=menu_key)
            await state.finish()
        else:
            await StateRegister.validation.set()
            await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")